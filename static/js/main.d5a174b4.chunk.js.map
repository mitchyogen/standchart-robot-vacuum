{"version":3,"sources":["components/Robot/Robot.tsx","components/GridLayout/GridLayout.tsx","App.tsx","index.tsx"],"names":["defaultRobotStyle","width","height","borderRadius","background","display","alignItems","justifyContent","Robot","_ref","direction","useEffect","changeDirection","_objectSpread","transform","React","createElement","Box","sx","data-testid","KeyboardArrowUpIcon","fontSize","color","GridStyle","backgroundColor","border","defaultCoordinates","x","y","defaultButtonStyle","Grid","_useState","useState","_useState2","_slicedToArray","coordinates","setCoordinates","_useState3","_useState4","xCoordinate","setXCoordinate","_useState5","_useState6","yCoordinate","setYCoordinate","_useState7","_useState8","robotDirection","setRobotDirection","_useState9","_useState10","reportCoordinates","setReportCoordinates","_useState11","_useState12","showRobot","setShowRobot","_useState13","_useState14","showXCoordinateErrorMessage","setShowXCoordinateErrorMessage","_useState15","_useState16","showYCoordinateErrorMessage","setShowYCoordinateErrorMessage","handleDirection","Container","mt","ml","gridTemplateColumns","gridColumn","Typography","variant","gutterBottom","flexDirection","gap","mr","component","& > :not(style)","m","autoComplete","TextField","id","type","label","inputProps","inputMode","max","min","error","helperText","value","onChange","event","target","FormControl","fullWidth","InputLabel","Select","labelId","MenuItem","Button","onClick","Number","disabled","concat","toUpperCase","App","GridLayout","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.d5a174b4.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Box } from \"@mui/material\";\nimport KeyboardArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\nimport { Direction } from \"../GridLayout/GridLayout\";\n\ninterface RobotProps {\n    direction: Direction;\n}\n\nconst defaultRobotStyle = {\n    width: \"100px\",\n    height: \"100px\",\n    borderRadius: \"50%\",\n    background: \"#2D2D2D\",\n    display: \"flex\",\n    alignItems: \"top\",\n    justifyContent: \"center\",\n};\n\nconst Robot = ({ direction }: RobotProps) => {\n    useEffect(() => {\n        changeDirection();\n    }, [direction]);\n\n    const changeDirection = () => {\n        switch (direction) {\n            case \"north\":\n                return {\n                    ...defaultRobotStyle,\n                    transform: \"rotate(0)\",\n                };\n            case \"east\":\n                return {\n                    ...defaultRobotStyle,\n                    transform: \"rotate(90deg)\",\n                };\n            case \"south\":\n                return {\n                    ...defaultRobotStyle,\n                    transform: \"rotate(180deg)\",\n                };\n            case \"west\":\n                return {\n                    ...defaultRobotStyle,\n                    transform: \"rotate(-90deg)\",\n                };\n        }\n    };\n\n    return (\n        <Box sx={changeDirection()} data-testid=\"robot\">\n            <KeyboardArrowUpIcon\n                sx={{\n                    fontSize: \"60px\",\n                    color: \"#fff\",\n                }}\n            />\n        </Box>\n    );\n};\n\nexport default Robot;\n","import React, { useState } from \"react\";\nimport {\n    Box,\n    Button,\n    Container,\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    SelectChangeEvent,\n    TextField,\n    Typography,\n} from \"@mui/material\";\nimport Robot from \"../Robot/Robot\";\n\nexport type Direction = \"north\" | \"south\" | \"east\" | \"west\";\n\ninterface CoordinatesProps {\n    x: number;\n    y: number;\n    direction: Direction;\n}\n\nconst GridStyle = {\n    width: 100,\n    height: 100,\n    backgroundColor: \"primary.dark\",\n    border: \"1px solid #000000\",\n};\n\nconst defaultCoordinates: CoordinatesProps = {\n    x: 0,\n    y: 0,\n    direction: \"north\",\n};\n\nconst defaultButtonStyle = {\n    width: \"200px\",\n    height: \"50px\",\n};\n\nconst Grid = () => {\n    const [coordinates, setCoordinates] = useState(defaultCoordinates);\n    const [xCoordinate, setXCoordinate] = useState(\"\");\n    const [yCoordinate, setYCoordinate] = useState(\"\");\n    const [robotDirection, setRobotDirection] = useState<Direction>(\"north\");\n    const [reportCoordinates, setReportCoordinates] = useState(false);\n    const [showRobot, setShowRobot] = useState(false);\n    const [showXCoordinateErrorMessage, setShowXCoordinateErrorMessage] = useState(false);\n    const [showYCoordinateErrorMessage, setShowYCoordinateErrorMessage] = useState(false);\n\n    const handleDirection = (direction: string) => {\n        setReportCoordinates(false);\n        if (direction === \"left\") {\n            if (coordinates.direction === \"north\") {\n                setCoordinates({ ...coordinates, direction: \"west\" });\n            } else if (coordinates.direction === \"east\") {\n                setCoordinates({ ...coordinates, direction: \"north\" });\n            } else if (coordinates.direction === \"south\") {\n                setCoordinates({ ...coordinates, direction: \"east\" });\n            } else if (coordinates.direction === \"west\") {\n                setCoordinates({ ...coordinates, direction: \"south\" });\n            }\n        } else {\n            if (coordinates.direction === \"north\") {\n                setCoordinates({ ...coordinates, direction: \"east\" });\n            } else if (coordinates.direction === \"east\") {\n                setCoordinates({ ...coordinates, direction: \"south\" });\n            } else if (coordinates.direction === \"south\") {\n                setCoordinates({ ...coordinates, direction: \"west\" });\n            } else if (coordinates.direction === \"west\") {\n                setCoordinates({ ...coordinates, direction: \"north\" });\n            }\n        }\n    };\n\n    const handleRobotPlacement = () => {\n        if (!xCoordinate && !yCoordinate) {\n            setShowXCoordinateErrorMessage(true);\n            setShowYCoordinateErrorMessage(true);\n        } else if (!xCoordinate) {\n            setShowXCoordinateErrorMessage(true);\n            setShowYCoordinateErrorMessage(false);\n        } else if (!yCoordinate) {\n            setShowYCoordinateErrorMessage(true);\n            setShowXCoordinateErrorMessage(false);\n        } else {\n            setCoordinates({\n                x: Number(xCoordinate),\n                y: Number(yCoordinate),\n                direction: robotDirection,\n            });\n            setShowRobot(true);\n            // reset input fields\n            setReportCoordinates(false);\n            setShowXCoordinateErrorMessage(false);\n            setShowYCoordinateErrorMessage(false);\n            setXCoordinate(\"\");\n            setYCoordinate(\"\");\n            setRobotDirection(\"north\");\n        }\n    };\n\n    const handleRobotDirection = (event: SelectChangeEvent<typeof coordinates.direction>) => {\n        setRobotDirection(event.target.value as Direction);\n    };\n\n    const handleRobotMovement = () => {\n        if (coordinates.direction === \"north\") {\n            if (coordinates.y < 4) {\n                setCoordinates({ ...coordinates, y: Number(coordinates.y) + 1 });\n            }\n        } else if (coordinates.direction === \"east\") {\n            if (coordinates.x < 4) {\n                setCoordinates({ ...coordinates, x: Number(coordinates.x) + 1 });\n            }\n        } else if (coordinates.direction === \"south\") {\n            if (coordinates.y > 0) {\n                setCoordinates({ ...coordinates, y: Number(coordinates.y) - 1 });\n            }\n        } else if (coordinates.direction === \"west\") {\n            if (coordinates.x > 0) {\n                setCoordinates({ ...coordinates, x: Number(coordinates.x) - 1 });\n            }\n        }\n    };\n\n    const isRobotWithinGrid = () => {\n        if (\n            (coordinates.y === 4 && coordinates.direction == \"north\") ||\n            (coordinates.y === 0 && coordinates.direction === \"south\") ||\n            (coordinates.x === 0 && coordinates.direction === \"west\") ||\n            (coordinates.x === 4 && coordinates.direction === \"east\")\n        ) {\n            return false;\n        }\n\n        return true;\n    };\n\n    return (\n        <Container sx={{ mt: 8, ml: 4 }}>\n            <Box display=\"grid\" gridTemplateColumns=\"repeat(12, 1fr)\">\n                {/* Displays the 5x5 grid */}\n                <Box gridColumn=\"span 6\">\n                    <Box sx={{ display: \"flex\" }}>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 0 && coordinates.y === 4 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 1 && coordinates.y === 4 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 2 && coordinates.y === 4 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 3 && coordinates.y === 4 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 4 && coordinates.y === 4 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Typography variant=\"subtitle2\" gutterBottom sx={{ ml: -2, mt: -4 }}>\n                            x:4, y:4\n                        </Typography>\n                    </Box>\n                    <Box sx={{ display: \"flex\" }}>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 0 && coordinates.y === 3 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 1 && coordinates.y === 3 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 2 && coordinates.y === 3 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 3 && coordinates.y === 3 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 4 && coordinates.y === 3 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                    </Box>\n                    <Box sx={{ display: \"flex\" }}>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 0 && coordinates.y === 2 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 1 && coordinates.y === 2 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 2 && coordinates.y === 2 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 3 && coordinates.y === 2 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 4 && coordinates.y === 2 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                    </Box>\n                    <Box sx={{ display: \"flex\" }}>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 0 && coordinates.y === 1 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 1 && coordinates.y === 1 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 2 && coordinates.y === 1 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 3 && coordinates.y === 1 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 4 && coordinates.y === 1 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                    </Box>\n                    <Box sx={{ display: \"flex\" }}>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 0 && coordinates.y === 0 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 1 && coordinates.y === 0 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 2 && coordinates.y === 0 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 3 && coordinates.y === 0 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                        <Box sx={GridStyle}>\n                            {coordinates.x === 4 && coordinates.y === 0 && showRobot && (\n                                <Robot direction={coordinates.direction} />\n                            )}\n                        </Box>\n                    </Box>\n                </Box>\n                {/* Display the input boxes and buttons */}\n                <Box\n                    gridColumn=\"span 6\"\n                    sx={{\n                        display: \"flex\",\n                        alignItems: \"end\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                        gap: 2,\n                        mr: 8,\n                    }}\n                >\n                    <Box\n                        sx={{\n                            display: \"flex\",\n                            alignItems: \"flex-start\",\n                        }}\n                    >\n                        <Box\n                            component=\"form\"\n                            sx={{\n                                \"& > :not(style)\": { m: 1, width: \"15ch\" },\n                            }}\n                            autoComplete=\"off\"\n                        >\n                            <TextField\n                                id=\"xCoordinate\"\n                                type=\"number\"\n                                label=\"X Coordinate\"\n                                variant=\"outlined\"\n                                sx={{ height: \"50px\" }}\n                                inputProps={{\n                                    inputMode: \"numeric\",\n                                    max: 4,\n                                    min: 0,\n                                }}\n                                error={showXCoordinateErrorMessage}\n                                helperText={showXCoordinateErrorMessage && \"Enter a value between 0 - 4\"}\n                                value={xCoordinate}\n                                onChange={(event) => {\n                                    setXCoordinate(event.target.value);\n                                }}\n                            />\n                        </Box>\n                        <Box\n                            component=\"form\"\n                            sx={{\n                                \"& > :not(style)\": { m: 1, width: \"15ch\" },\n                            }}\n                            autoComplete=\"off\"\n                        >\n                            <TextField\n                                id=\"yCoordinate\"\n                                type=\"number\"\n                                label=\"Y Coordinate\"\n                                variant=\"outlined\"\n                                sx={{ height: \"50px\" }}\n                                error={showYCoordinateErrorMessage}\n                                helperText={showYCoordinateErrorMessage && \"Enter a value between 0 - 4\"}\n                                inputProps={{\n                                    inputMode: \"numeric\",\n                                    max: 4,\n                                    min: 0,\n                                }}\n                                value={yCoordinate}\n                                onChange={(event) => {\n                                    setYCoordinate(event.target.value);\n                                }}\n                            />\n                            <FormControl fullWidth>\n                                <InputLabel id=\"direction-label\">Direction</InputLabel>\n                                <Select\n                                    labelId=\"robotDirection-label\"\n                                    id=\"robotDirection\"\n                                    value={robotDirection}\n                                    label=\"Direction\"\n                                    onChange={handleRobotDirection}\n                                    data-testid=\"robotDirection\"\n                                >\n                                    <MenuItem value={\"north\"}>North</MenuItem>\n                                    <MenuItem value={\"south\"}>South</MenuItem>\n                                    <MenuItem value={\"east\"}>East</MenuItem>\n                                    <MenuItem value={\"west\"}>West</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Box>\n                    </Box>\n                    <Button\n                        sx={[defaultButtonStyle]}\n                        variant=\"contained\"\n                        color=\"success\"\n                        onClick={() => {\n                            handleRobotPlacement();\n                        }}\n                    >\n                        PLACE\n                    </Button>\n                    <Button\n                        sx={defaultButtonStyle}\n                        variant=\"contained\"\n                        disabled={!showRobot || !isRobotWithinGrid()}\n                        onClick={handleRobotMovement}\n                    >\n                        MOVE\n                    </Button>\n                    <Button\n                        sx={defaultButtonStyle}\n                        variant=\"contained\"\n                        onClick={() => handleDirection(\"left\")}\n                        disabled={!showRobot}\n                    >\n                        LEFT\n                    </Button>\n                    <Button\n                        sx={defaultButtonStyle}\n                        variant=\"contained\"\n                        onClick={() => handleDirection(\"right\")}\n                        disabled={!showRobot}\n                    >\n                        RIGHT\n                    </Button>\n                    <Button\n                        sx={defaultButtonStyle}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        disabled={!showRobot}\n                        onClick={() => setReportCoordinates(true)}\n                    >\n                        REPORT\n                    </Button>\n                    {reportCoordinates && (\n                        <Typography variant=\"subtitle2\">{`X: ${coordinates.x}, Y: ${\n                            coordinates.y\n                        }, F: ${coordinates.direction.toUpperCase()}`}</Typography>\n                    )}\n                </Box>\n            </Box>\n            {/* Display the x,y,F values */}\n            <Typography variant=\"subtitle2\" sx={{ mt: 2, ml: -3 }}>\n                x:0, y:0\n            </Typography>\n        </Container>\n    );\n};\n\nexport default Grid;\n","import React from \"react\";\nimport \"./App.css\";\nimport GridLayout from \"./components/GridLayout/GridLayout\";\n\nfunction App() {\n    return <GridLayout />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement);\nroot.render(<App />);\n"],"sourceRoot":""}